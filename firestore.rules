rules_version = '2';

function isAuthentificated() {
    return request.auth != null;
}

function isUserAuthenticated(userId) {
    return isAnyAuthentificated() && userId == request.auth.uid;
}

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdministrator() {
      return get(/databases/$(database)/documents/user/$(request.auth.uid)).isAdministrator
    }

    match /users/{userId} {
      allow read: if isAuthentificated()
            && isUserAuthenticated(userId);
      allow create: if isAuthentificated()
            && isUserAuthenticated(userId);
      allow update: if isAuthentificated()
            && isUserAuthenticated(userId);
    }

    match /circles/{circleId} {
      allow read: if true;
      allow write: if isAdministrator();
    }

    match /actors/{actorId} {
      allow read: if true;
      allow write: if isAdministrator();
    }

    match /products/{productId} {
      allow read: if true;
      allow write: if isAdministrator();
    }

    match /tags/{tagId} {
      allow read: if true;
      allow write: if isAdministrator();
    }

    match /reviews/{reviewId} {
      allow read: if true;
      allow create, delete: if isAdministrator();
      allow update: if isAdministrator()
          && request.resource.data.createdAt == resource.data.createdAt;
    }
  }
}
